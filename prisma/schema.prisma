
generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
      
model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String?
  username         String    @unique
  name             String?
  role             String    @default("user")
  isVerified       Boolean   @default(false)
  verificationToken String?
  otp              String?
  otpExpiry        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  events           Event[]   @relation("UserEvents")
  registrations    EventRegistration[]
  notifications    Notification[]
  feedbacks        Feedback[]
  userSettings     UserSettings?
  userDashboard    UserDashboard?
}

model Event {
  id               Int       @id @default(autoincrement())
  name             String
  description      String
  date             DateTime
  time             String
  location         String
  category         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  userId           Int
  user             User      @relation("UserEvents", fields: [userId], references: [id])

  registrations    EventRegistration[]
  notifications    Notification[]
  feedbacks        Feedback[]
}

model EventRegistration {
  id               Int       @id @default(autoincrement())
  eventId          Int
  userId           Int
  registrationDate DateTime  @default(now())
  registrationId   String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  event            Event     @relation(fields: [eventId], references: [id])
  user             User      @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Notification {
  id               Int       @id @default(autoincrement())
  userId           Int
  eventId          Int
  notificationType String
  sentAt           DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
  event            Event     @relation(fields: [eventId], references: [id])
}

model Feedback {
  id               Int       @id @default(autoincrement())
  userId           Int
  eventId          Int
  rating           Int
  comments         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
  event            Event     @relation(fields: [eventId], references: [id])
}

model UserSettings {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  enableReminders  Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
}

model UserDashboard {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
}